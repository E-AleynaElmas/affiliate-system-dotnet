version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: affiliate-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=YourStrong@Password123
      - POSTGRES_DB=AffiliateSystemDb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - affiliate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: affiliate-api
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=AffiliateSystemDb;Username=postgres;Password=YourStrong@Password123;
      - JwtSettings__SecretKey=ThisIsASecretKeyForJWTTokenGenerationWith256BitsLength!!
      - JwtSettings__Issuer=AffiliateSystem
      - JwtSettings__Audience=AffiliateSystemUsers
      - JwtSettings__ExpirationInHours=24
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - affiliate-network
    volumes:
      - ./logs:/app/logs

  # Redis Cache (Optional - for production)
  redis:
    image: redis:alpine
    container_name: affiliate-redis
    ports:
      - "6379:6379"
    networks:
      - affiliate-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

networks:
  affiliate-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: